<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.clw.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.clw.domain.User">
    <!--@mbg.generated-->
    <!--@Table user-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="nick" jdbcType="VARCHAR" property="nick" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="phonenumber" jdbcType="VARCHAR" property="phonenumber" />
    <result column="icon" jdbcType="VARCHAR" property="icon" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, username, `password`, nick, sex, phonenumber, icon, `type`, `status`, create_time, 
    update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.clw.domain.User" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into user (username, `password`, nick, 
      sex, phonenumber, icon, 
      `type`, `status`, create_time, 
      update_time)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{nick,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{phonenumber,jdbcType=VARCHAR}, #{icon,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.clw.domain.User" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="nick != null">
        nick,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phonenumber != null">
        phonenumber,
      </if>
      <if test="icon != null">
        icon,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nick != null">
        #{nick,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phonenumber != null">
        #{phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="icon != null">
        #{icon,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.clw.domain.User">
    <!--@mbg.generated-->
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nick != null">
        nick = #{nick,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phonenumber != null">
        phonenumber = #{phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="icon != null">
        icon = #{icon,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.clw.domain.User">
    <!--@mbg.generated-->
    update user
    set username = #{username,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      nick = #{nick,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      phonenumber = #{phonenumber,jdbcType=VARCHAR},
      icon = #{icon,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>


<!--  <select id="selectUserNameByHomeId" resultMap="BaseResultMap">-->
<!--    SELECT u.*-->
<!--    FROM home_user hu-->
<!--    LEFT JOIN `user` u ON hu.user_id = u.id-->
<!--    WHERE hu.home_id = #{id}-->
<!--  </select>-->

  <select id="selectUserNameByHomeId" resultMap="BaseResultMap">
    SELECT *
    FROM user
    WHERE id = #{host_id}
  </select>

  <select id="selectByPrimaryUsername" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from user
    where username = #{username}
  </select>

  <select id="selectUser" resultMap="BaseResultMap">
    select *
    from user
    where id = #{userId}
  </select>
    <select id="selectUserInfo" resultMap="BaseResultMap">
      select <include refid="Base_Column_List"></include>
      from user
      <where>
        <if test="input != null">
          username like concat('%',#{input},'%')
        </if>
        <if test="input != null">
          or nick like concat('%',#{input},'%')
        </if>
      </where>
    </select>
  <update id="updateStatus">
    UPDATE `user`
    SET `status` = ABS( `status` - 1.0 )
    WHERE
	id = #{userId}
  </update>
  <select id="getUserByLike" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from user
    <where>
      <if test="username != null">
        username like concat('%',#{username},'%')
      </if>
      <if test="username != null">
        or nick like concat('%',#{username},'%')
      </if>
    </where>
  </select>
  <select id="selectHostName" resultType="String">
    select nick
    from user
    where id = #{host_id}
  </select>

  <select id="selectUsername" resultType="String">
    select nick
    from user
    where id = #{user_id}
  </select>
  <update id="resetPassword">
    update user
    set password = #{newPassword}
    <where>
      <foreach collection="list" open="id in(" close=")" separator="," item="item">
        #{item}
      </foreach>
    </where>
  </update>
</mapper>